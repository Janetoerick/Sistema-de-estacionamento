Model SysADLModel ; package SysADL.types { value type Int { } value type Boolean { }   value type Real { } dimension Vaga value type Vaga { dimension = Vaga } value type VagaIdoso extends Vaga { unit = Idoso dimension = Vaga } value type VagaDeficiente extends Vaga { unit = Deficiente dimension = Vaga } value type VagaNormal extends Vaga { unit = Normal dimension = Vaga } value type VagaGravida extends Vaga { unit = Gravida dimension = Vaga } unit Idoso { dimension = Vaga } unit Deficiente { dimension = Vaga } unit Gravida { dimension = Vaga } unit Normal { dimension = Vaga }  enum ComandoCancela { Abrir , Fechar }  value type Hora { } datatype StatusPagamento { attributes : pago : Boolean ; } datatype VagasDisponiveis { attributes : tipo : Vaga ; quantidade : Int ; } value type String { } } package ParkingSystemConnectors { import ParkingSystemPorts ; connector def DetectarPresencaCN { participants : ~ dpOPT : PresencaOPT ; ~ dpIPT : PresencaIPT ; flows :   Boolean from dpOPT to dpIPT }   connector def AcionarCancelaCN { participants : ~ acOPT : CancelaOPT ; ~ acIPT : CancelaIPT ; flows : ComandoCancela from acOPT to acIPT }  connector def PagamentoCN { participants : ~ pOPT : ValidarPagamentoOPT ; ~ pIPT : ValidarPagamentoIPT ; flows : StatusPagamento from pOPT to pIPT } connector def DetectarHoraCN { participants : ~ dhOPT : HoraOPT ; ~ dhIPT : HoraIPT ; flows : Hora from dhOPT to dhIPT } connector def MonitorarVagasCN { participants : ~ mvOPT : QuantidadeDeVagasOPT ; ~ mvIPT : QuantidadeDeVagasIPT ; flows :  VagasDisponiveis from mvOPT to mvIPT } connector def DetectarPassagemCN { participants : ~ dpOPT : PassagemOPT ; ~ dpIPT : PassagemIPT ; flows : Boolean from dpOPT to dpIPT } } package ParkingSystemComponents { import ParkingSystemConnectors ; import ParkingSystemPorts ; import SysADL.types ; component def SistemaDeEstacionamento { configuration { components : AcionarCancelaCP : AcionarCancelaCP { using ports : accOPT : CancelaOPT ; } CancelaCP : CancelaCP { using ports : cIPT : CancelaIPT ; } } }
	component def SensorDePresencaCP { ports : dOPT : PresencaOPT ; }
	component def CancelaCP { ports : cIPT : CancelaIPT ; }
	component def TicketCP { ports : hOPT : HoraOPT ; vpIPT : ValidarPagamentoIPT ; }
	component def SistemaDeControleCP { ports : pIPT : PresencaIPT ; cOPT : CancelaOPT ; hIPT : HoraIPT ; vpOPT : ValidarPagamentoOPT ; qvOPT : QuantidadeDeVagasOPT ; cIPT : CancelaIPT ; pIPT : PassagemIPT ; }
	component def InterfaceDeVagasCP { ports : qvIPT : QuantidadeDeVagasIPT ; }
	component def AcionarCancelaCP { ports : accOPT : CancelaOPT ; }
	component def SensorDePassagemCP { ports : pOPT : PassagemOPT ; } } package ParkingSystemPorts { import SysADL.types ;   port def PresencaOPT { flow out Boolean } port def PresencaIPT { flow in Boolean }   port def CancelaIPT { flow in ComandoCancela } port def CancelaOPT { flow out ComandoCancela }  port def ValidarPagamentoIPT { flow in StatusPagamento }  port def ValidarPagamentoOPT { flow out StatusPagamento } port def HoraIPT { flow in Hora } port def HoraOPT { flow out Hora } port def QuantidadeDeVagasIPT { flow in VagasDisponiveis } port def QuantidadeDeVagasOPT { flow out VagasDisponiveis } port def PassagemIPT { flow in Boolean } port def PassagemOPT { flow out Boolean } } Requirement ControlarCancelaRF ( 1 ) { text = "O sistema deve ser capaz de controlar a cancela."  Requirement ControlarCancelaAutomaticamenteRF ( 1.2 ) { text = "O sistema deve ser capaz de acionar a cancela." Requirement FornecerTicketRF ( 1.2.1 ) { text = "O sistema deve fornecer ao usuário um ticket de acesso." derive CapturarHorarioTicketRF , AbrirCancelaRF ; } Requirement EscanearTicketRF ( 1.2.5 ) { text = "O sistema deve escanear o ticket." derive VerificarStatusDoTicketRF ; } } Requirement ControlarCancelaManualmenteRF ( 1.1 ) { text = "O sistema deve permitir que um usuário autorizado acione a cancela manualmente." derive FecharCancelaRF , AbrirCancelaRF ; } } Requirement CapturarHorarioTicketRF ( 1.2.2 ) { text = "O sistema deve capturar o horário em que o ticket foi retirado." derive CalcularValorDoTicketRF ; } Requirement ExibirVagasRF ( 2.1 ) { text = "O sistema deve ser capaz de exibir a quantidade de vagas disponíveis de cada tipo." } Requirement MonitorarPresencaDeVeiculoRF ( 2.3 ) { text = "O sistema deve monitorar se há veículo em cada vaga."  derive InformarPresencaDeVeiculoRF ; } Requirement DisponibilidadeRNF ( 3 ) { text = "O sistema deve operar 24 horas por dia, 7 dias por semana." } Requirement VerificarStatusDoTicketRF ( 1.2.6 ) { text = "O sistema deve ser capaz de verificar os status do ticket." derive ConfirmarPamentoTicketRF ; } Requirement PagarTicketRF ( 1.2.4 ) { text = "O sistema deve permitir que o usuário pague o ticket." } Requirement CalcularValorDoTicketRF ( 1.2.3 ) { text = "O sistema deve calcular o valor total do ticket com base na hora de entrada e saída." derive PagarTicketRF ; } Requirement ConfirmarPamentoTicketRF ( 1.2.7 ) { text = "O sistema deve informar se o ticket está pago." derive AbrirCancelaRF ; } Requirement VerificarPassagemVeiculoRF ( 1.1.3 ) { text = "O sistema deve ser capaz de verificar se o veículo já passou pela cancela." derive FecharCancelaRF ; } Requirement InformarPresencaDeVeiculoRF ( 2.2 ) { text = "O sistema deve informar a presença de veículo na vaga." derive GerenciarVagasRF ; } Requirement GerenciarVagasRF ( 2 ) { text = "O sistema deve gerenciar a quantidade de vagas livres e ocupadas." derive ExibirVagasRF ; } Requirement AbrirCancelaRF ( 1.1.1 ) { text = "O sistema deve abrir a cancela." derive VerificarPassagemVeiculoRF ; } Requirement FecharCancelaRF ( 1.1.2 ) { text = "O sistema deve fechar a cancela." }